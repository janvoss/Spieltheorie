# Verhaltensökonomik

## Einleitung

## Unrealistische Annahmen vs. realistische Modellierung

```{r}
#| message: false
#| warning: false

library(tidyverse)


set.seed(123)
Anzahl <- 150

df <- data.frame(Farbe=c(rep("rot", Anzahl), rep("blau", Anzahl))
) %>% mutate(x=(ifelse(Farbe=="rot", 0, 1)),
              y=0)
# head(df)

df %>% ggplot(aes(x,y, color=Farbe))+
geom_jitter(width= 1.3, alpha=.5, size=3)+
scale_color_manual(values=c("blue", "red"))+
theme_void()+
labs(title="Rote und blaue Punkte",
     caption="Abbildung: Jan S. Voßwinkel")
```

Und jetzt reden wir über @Musgrave81

## Flat-Rate Bias

s. Tafelaufschrieb

## Die Prospect Theory

### Eine Nutzenfunktion

```{r}
#| message: false
#| warning: false
#| fig-cap: Eine Nutzenfunktion

library(ggplot2)

#  Sigmoid-Funktion
sigmoid_sym <- function(x, k, lambda) {
  ifelse(x>=0, x / (1 + abs(x)^k)^(1/k),
         (lambda)*x / (1 + abs(x)^k)^(1/k))
}

# Daten erzeugen
df <- data.frame(x = seq(-5, 5, length.out = 200))
df$y <- sigmoid_sym(df$x, k = .88, lambda=2.25)

# Hilfslinien und Achsen-Breaks
x_vals <- c(-3, -2, -1, 1, 2, 3)
y_vals <- sigmoid_sym(x_vals, k = .88, lambda=2.25)
lines_df <- data.frame(x = x_vals, y = y_vals)

p <- ggplot(df, aes(x, y)) +
  geom_line(size = 1.2, color = "blue") +
  # Vertikale Hilfslinien
  geom_segment(
    data = lines_df,
    aes(x = x, xend = x, y = 0, yend = y),
    linetype = "dashed", color = "red"
  ) +
  # Horizontale Hilfslinien
  geom_segment(
    data = lines_df,
    aes(x = x, xend = 0, y = y, yend = y),
    linetype = "dashed", color = "red"
  ) +
  # Achsen durch den Ursprung
  geom_hline(yintercept = 0, color = "black", linewidth = 0.8) +
  geom_vline(xintercept = 0, color = "black", linewidth = 0.8) +
  # Achsen-Breaks
  scale_x_continuous(breaks = c(-2, -1, 0, 1, 2)) +
  scale_y_continuous(breaks = c(round(y_vals, 2), 0)) +
  labs(title = "Eine Nutzenfunktion nach der Prospect Theory",
       x = "Zugang von Gütern", y = "Nutzen") +
  theme_light() +
  theme(panel.border = element_blank(),
        axis.line = element_blank())

# p

p+ coord_cartesian(xlim = c(0, 5), ylim = c(0, 1))+
  ggtitle("Eine Nutzenfunktion")
```


### Eine Wertefunktion nach der Prospect Theory

```{r}
#| message: false
#| warning: false
#| fig-cap: Eine Wertefunktion nach der Prospect Theory

p
```

:::{.callout-note 
    icon=false 
    collapse=true }

# Wertefunktion im Original {.unnumbered}

```{r}
#| message: false
#| warning: false
#| fig-cap: Wertefunktion im Original

library(ggplot2)

# Symmetrische Wertefunktion

lambda <- -2.25
alpha <- .88
beta <- .88

prospect <- function(x) {ifelse(x<0,
                         lambda* ((-1)*x)^beta,
                         x^alpha)
}

# Daten erzeugen
df <- data.frame(x = seq(-5, 5, length.out = 200))
df$y <- prospect(df$x)

# Hilfslinien und Achsen-Breaks
x_vals <- c(-3, -2, -1, 1, 2, 3)
y_vals <- prospect(x_vals)
lines_df <- data.frame(x = x_vals, y = y_vals)

 ggplot(df, aes(x, y)) +
  geom_line(size = 1.2, color = "blue") +
  # Vertikale Hilfslinien
  geom_segment(
    data = lines_df,
    aes(x = x, xend = x, y = 0, yend = y),
    linetype = "dashed", color = "red"
  ) +
  # Horizontale Hilfslinien
  geom_segment(
    data = lines_df,
    aes(x = x, xend = 0, y = y, yend = y),
    linetype = "dashed", color = "red"
  ) +
  # Achsen durch den Ursprung
  geom_hline(yintercept = 0, color = "black", linewidth = 0.8) +
  geom_vline(xintercept = 0, color = "black", linewidth = 0.8) +
  # Achsen-Breaks
  scale_x_continuous(breaks = c(-2, -1, 0, 1, 2)) +
  scale_y_continuous(breaks = c(round(y_vals, 2), 0)) +
  labs(title = "Eine Nutzenfunktion nach der Prospect Theory",
       subtitle = "Parameter nach Kahnemann & Tversky",
       x = "Zugang von Gütern", y = "Nutzen") +
  theme_light() +
  theme(panel.border = element_blank(),
        axis.line = element_blank())
```


:::

### Wahrscheinlichkeitsgewichtung

```{r}
#| message: false
#| warning: false
#| fig-cap: Wahrscheinlichkeitsgewichtung

library(ggplot2)

# Definition der Gewichtungsfunktion nach Kahneman/Tversky
weighting_function <- function(p, gamma = 0.61) {
  p^gamma / (p^gamma + (1-p)^gamma)^(1/gamma)
}

# Daten erstellen
probabilities <- seq(0.01, 0.99, by = 0.01)
weights <- weighting_function(probabilities)
df <- data.frame(p = probabilities, w = weights)

# Plot erstellen
ggplot(df, aes(x = p)) +
  geom_line(aes(y = w), color = "blue", linewidth = 1) +  # Gewichtungsfunktion
  geom_line(aes(y = p), color = "black", linetype = "dashed") +  # Referenzdiagonale
  geom_ribbon(aes(ymin = p, ymax = ifelse(w > p, w, p)),
              fill = "green", alpha = 0.3) +  # Übergewichtungsbereich
  geom_ribbon(aes(ymin = ifelse(w < p, w, p), ymax = p),
              fill = "red", alpha = 0.3) +  # Untergewichtungsbereich
  labs(title = "Wahrscheinlichkeitsgewichtungsfunktion nach Kahneman & Tversky",
     #  subtitle = expression(paste("Parameter ", gamma, " = 0.61")),
       x = "Objektive Wahrscheinlichkeit (p)",
       y = "Subjektive Gewichtung w(p)",
       caption = "Abbildung: Jan S. Voßwinkel") +
  #scale_x_continuous(breaks = seq(0, 1, 0.1)) +
  #scale_y_continuous(breaks = seq(0, 1, 0.1)) +
  theme_minimal()
```

$w(p) = \frac{p^{\gamma}}{\left[ p^{\gamma} + (1-p)^{\gamma} \right]^{1/\gamma}}$

```{r}
#| message: false
#| warning: false
#| fig-cap: Wahrscheinlichkeitsgewichtung bei positiven und negativen Ereignissen

library(ggplot2)

# Definition der Gewichtungsfunktion nach Kahneman/Tversky
weighting_function <- function(p, gamma) {
  p^gamma / (p^gamma + (1-p)^gamma)^(1/gamma)
}

# Daten erstellen
probabilities <- seq(0.01, 0.99, by = 0.01)
df <- data.frame(
  p = rep(probabilities, 2),
  w = c(weighting_function(probabilities, gamma = 0.61),
        weighting_function(probabilities, gamma = 0.69)),
  gamma = factor(rep(c("positive Ereignisse", "negative Ereignisse"), each = length(probabilities)))
)

# Plot erstellen
ggplot(df, aes(x = p, y = w, color = gamma)) +
  geom_line(linewidth = 1) +
  geom_line(aes(x = p, y = p), color = "black", linetype = "dashed", linewidth = 0.8, inherit.aes = FALSE) +
  labs(
    title = "Wahrscheinlichkeitsgewichtungsfunktion nach Kahneman & Tversky",
    subtitle="Unterschiedliche Gewichtungen bei positiven und negativen Ereignissen",
    x = "Objektive Wahrscheinlichkeit p",
    y = "Subjektive Gewichtung w(p)",
    color = "Ereignisart",
    caption = "Abbildung: Jan S. Voßwinkel"
  ) +
  theme_minimal()

```


## Mental Accounting

s. Tafelaufschrieb

## Der Status-quo Bias

## Umgang mit Risiken

### Erwartungsnutzentheorie 

- Erwartungswert als Kriterium unplausibel: St. Petersburg Paradox 

- Stattdessen: Erwartungsnutzen
- Nutzen des Erwartunswerts $\neq$ Erwartungswert des Nutzens ($U(EW)\neq EW(U)$)

- Axiome der Erwartungsnutzentheorie:

  - **Vollständigkeit**: FÜr alle Alternativen $A$ und $B$ gilt entweder $A \succeq B$ oder $A \preceq B$ oder beide Bedingungen
  
  - **Transitivität**: Aus $A \preceq B$ und $B \preceq C$ folgt $A \preceq C$
  
  - **Stetitgkeit**: Für alle Alternativen $A, B, C$ mit $A \preceq B$ und $B \preceq C$ existiert eine Wahrscheinlichkeit $p$, sodass gilt $pA+(1-p)C \sim B$
  
  - **Unabhängigkeit**: Für alle Alternativen $A, B, C$ mit $A \preceq B$ gilt $pA+(1-p)C \preceq pB+(1-p)C$ 



### Allais-Paradoxon




## Kritische Diskussion der Verhaltensökonomik