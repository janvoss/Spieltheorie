# Nicht-kooperative Spieltheorie

## Einleitung und begriffliche Einordnung

## Das Nash-Gleichgewicht

## Simultane Spiele

### Grundsätzliche Struktur eines Spiels

![Allgemeines Struktur eines Spiels](figure/Allgemeine-Struktur.png){width="50%"}


### Reine Strategien

#### Definition Nash-Gleichgewicht

Ein Nash-Gleichgewicht liegt vor, wenn jeder Spieler die beste Antwort auf die beste Strategie des Gegenspielers spielt.

Formal:

$u_{i}\left(s_{i}^{*},s_{-i}^{*}\right)\geq u_{i}\left(s_{i},s_{-i}^{*}\right)\mbox{ für alle }i,\mbox{ }s_{i}\in S_{i}$

Intuition: Ein Nash-Gleichgewicht liegt vor, wenn kein Spieler mehr die Möglichkeit hat, seine Situation durch eine **nur eigene** Entscheidungsänderung zu verbessern.

In der Matrix oben heißt dass, das geprüft werden muss

$A	\geq B \land a  \geq c$ $\rightarrow$ **ol**

$B	\geq A \land b  \geq d$ $\rightarrow$ **ul**

$C	\geq D \land c  \geq a$ $\rightarrow$ **or**

$D	\geq C \land d  \geq b$ $\rightarrow$ **ur**

Es kann kein oder ein Nash-Gleichgewicht existieren oder mehrere Nash-Gleichgewichte

#### Einperiodige Spiele

```{python}

import numpy as np

import random

# Zufällige Ganzzahlen zwischen 0 und 9 generieren
A = random.randint(0, 9)
B = random.randint(0, 9)
C = random.randint(0, 9)
D = random.randint(0, 9)
a = random.randint(0, 9)
b = random.randint(0, 9)
c = random.randint(0, 9)
d = random.randint(0, 9)

# Formatierte Bimatrix ausgeben
print("    l   r")
print(f"o  {A},{a}  {C},{c}")
print(f"u  {B},{b}  {D},{d}")


# Funktionen für Nash-Bedingungen
def is_ol_nash(A, B, a, c):
  return "ol" if (A >= B) and (a >= c) else "not_ol"

def is_ul_nash(B, A, b, d):
  return "ul" if (B >= A) and (b >= d) else "not_ul"

def is_or_nash(C, D, c, a):
  return "or" if (C >= D) and (c >= a) else "not_or"

def is_ur_nash(D, C, d, b):
  return "ur" if (D >= C) and (d >= b) else "not_ur"

# Nash-Bedingungen überprüfen und Strings zuweisen
Cand_Nash_ol = is_ol_nash(A, B, a, c)
Cand_Nash_ul = is_ul_nash(B, A, b, d)
Cand_Nash_or = is_or_nash(C, D, c, a)
Cand_Nash_ur = is_ur_nash(D, C, d, b)

# Ergebnisse kombinieren und NAs entfernen
Nash_GG = np.array([Cand_Nash_ol, Cand_Nash_ul, Cand_Nash_or, Cand_Nash_ur])
Nash_GG_filtered = []
for element in Nash_GG:
  if element == "ol" or element == "ul" or element == "or" or element == "ur":
    Nash_GG_filtered.append(element)

# Ergebnis ausgeben
#print(Nash_GG_filtered)

```
```{python}
print(Nash_GG_filtered)
```


##### Koordinationsspiel

![Koordinationsspiel](figure/Koordinationsspiel-1.png){width="50%"}

##### Chicken Game

![Chicken Game](figure/Chicken-Game-1.png){width="50%"}

##### Geschlechterkampf

##### Gefangenendilemma

#### Wiederholte Spiele

#### Trembling Hand

### Gemischte Strategien

## Sequenzielle Spiele

### Vollständige Information

### Unvollständige Information

## Koalitionsspiele

## Evolutionäre Spiele



